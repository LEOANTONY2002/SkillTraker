### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Categories {
  createdAt: DateTime
  id: String
  name: String
  skills: [CategoriesOnSkills]
  updatedAt: DateTime
}

type CategoriesOnSkills {
  category: Categories
  categoryId: String
  createdAt: DateTime
  employeeSkills: [EmployeeSkills]
  id: String
  skill: Skills
  skillId: String
  updatedAt: DateTime
}

type Certificates {
  createdAt: DateTime
  employeeSkill: EmployeeSkills
  employeeSkillId: String
  expiry: String
  id: String
  name: String
  photo: String
  publisher: Publishers
  publisherId: String
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Employee {
  accessToken: String
  createdAt: DateTime
  department: String
  displayName: String
  division: String
  email: String
  employeeSkills: [EmployeeSkills]
  id: String
  isManager: Boolean
  jobTitle: String
  location: String
  manager: String
  mobileNumber: String
  name: String
  photo: String
  role: String
  updatedAt: DateTime
}

type EmployeeSkills {
  certificate: Certificates
  createdAt: DateTime
  employee: Employee
  employeeId: String
  id: String
  level: String
  skill: CategoriesOnSkills
  skillId: String
  updateLog: [String]
  updatedAt: DateTime
}

type Mutation {
  addCategory(id: String, name: String!): [Categories]
  addCertificate(employeeId: String!, employeeSkillId: String!, expiry: String, id: String, name: String!, photo: String!, publisherId: String!): Employee
  addEmployee(email: String!, isManager: Boolean, name: String!, password: String!, photo: String, role: String): Employee
  addEmployeeSkill(coskillId: String!, employeeId: String!, level: String!): Employee
  addPublisher(id: String!, name: String!): [Publishers]
  addSkill(categoryId: String!, name: String!): [CategoriesOnSkills]
  deleteCategory(id: String!): [Categories]
  deleteCertificate(employeeId: String!, id: String!): Employee
  deleteEmployeeSkill(employeeId: String!, eskillId: String!): Employee
  deletePublisher(id: String!): [Publishers]
  deleteSkill(coskillId: String!, id: String!): [CategoriesOnSkills]
  editCategory(id: String!, name: String): Categories
  editEmployee(email: String!, id: String!, name: String!, photo: String): Employee
  editSkill(categoryId: String!, id: String!, name: String!, skillId: String!): [CategoriesOnSkills]
  employeeLogin(email: String!, password: String!): Employee
}

type Publishers {
  certificates: [Certificates]
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type Query {
  allCOS: [CategoriesOnSkills]
  categories: [Categories]
  category(id: String!): Categories
  certificates: [Certificates]
  cos(skillId: String!): [CategoriesOnSkills]
  employees: [Employee]
  publishers: [Publishers]
  searchCategory(word: String!): [Categories]
  searchCertificate(word: String!): [Certificates]
  searchCertificateByPublisher(word: String!): [Certificates]
  searchEmployee(word: String!): [Employee]
  searchEmployeeByCategory(word: String!): [Employee]
  searchEmployeeBySkill(word: String!): [Employee]
  searchSkill(word: String!): [CategoriesOnSkills]
  skill(id: String!): Skills
  skills: [Skills]
}

type Skills {
  categories: [CategoriesOnSkills]
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}